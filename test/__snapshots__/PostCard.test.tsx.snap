// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostCard renders 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="sc-bXdtCk eTLLkP"
      >
        <article
          class="sc-dYOLZc gziIWq"
        >
          <div
            class="sc-jMpmlX grlzTq"
          >
            <div
              class="gatsby-image-wrapper"
              data-gatsby-image-wrapper=""
              style="position: relative; overflow: hidden;"
            >
              <div
                aria-hidden="true"
                style="padding-top: 150%;"
              />
              <div
                aria-hidden="true"
                data-placeholder-image=""
                style="height: 100%; left: 0px; position: absolute; top: 0px; width: 100%;"
              />
              <picture>
                <source
                  data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/bd763/pexels-cottonbro-3832028.webp 640w"
                  sizes="100vw"
                  type="image/webp"
                />
                <img
                  alt="asdf"
                  data-gatsby-image-ssr=""
                  data-main-image=""
                  data-src="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg"
                  data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg 640w"
                  decoding="async"
                  loading="lazy"
                  sizes="100vw"
                  style="height: 100%; left: 0px; position: absolute; top: 0px; transform: translateZ(0); transition: opacity 250ms linear; width: 100%; will-change: opacity; opacity: 0;"
                />
              </picture>
              <noscript />
              <script
                type="module"
              >
                const t="undefined"!=typeof HTMLImageElement&&"loading"in HTMLImageElement.prototype;if(t){const t=document.querySelectorAll("img[data-main-image]");for(let e of t){e.dataset.src&&(e.setAttribute("src",e.dataset.src),e.removeAttribute("data-src")),e.dataset.srcset&&(e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset"));const t=e.parentNode.querySelectorAll("source[data-srcset]");for(let e of t)e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset");e.complete&&(e.style.opacity=1,e.parentNode.parentNode.querySelector("[data-placeholder-image]").style.opacity=0)}}
              </script>
            </div>
          </div>
          <div
            class="sc-kThouk jywWDv"
          >
            <div
              class="sc-jZhnRx buEZwx"
            >
              <div
                class="sc-hoLldG cDDrgp"
              >
                <div
                  class="gatsby-image-wrapper"
                  data-gatsby-image-wrapper=""
                  style="position: relative; overflow: hidden;"
                >
                  <div
                    aria-hidden="true"
                    style="padding-top: 150%;"
                  />
                  <div
                    aria-hidden="true"
                    data-placeholder-image=""
                    style="height: 100%; left: 0px; position: absolute; top: 0px; width: 100%;"
                  />
                  <picture>
                    <source
                      data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/bd763/pexels-cottonbro-3832028.webp 640w"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <img
                      alt="asdf"
                      data-gatsby-image-ssr=""
                      data-main-image=""
                      data-src="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg"
                      data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg 640w"
                      decoding="async"
                      loading="lazy"
                      sizes="100vw"
                      style="height: 100%; left: 0px; position: absolute; top: 0px; transform: translateZ(0); transition: opacity 250ms linear; width: 100%; will-change: opacity; opacity: 0;"
                    />
                  </picture>
                  <noscript />
                  <script
                    type="module"
                  >
                    const t="undefined"!=typeof HTMLImageElement&&"loading"in HTMLImageElement.prototype;if(t){const t=document.querySelectorAll("img[data-main-image]");for(let e of t){e.dataset.src&&(e.setAttribute("src",e.dataset.src),e.removeAttribute("data-src")),e.dataset.srcset&&(e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset"));const t=e.parentNode.querySelectorAll("source[data-srcset]");for(let e of t)e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset");e.complete&&(e.style.opacity=1,e.parentNode.parentNode.querySelector("[data-placeholder-image]").style.opacity=0)}}
                  </script>
                </div>
              </div>
              <div
                class="sc-hBDmJg bHXOYj"
              >
                <span
                  class="sc-dTdQuR cRXXLQ"
                >
                  React Hooks - memo
                </span>
                <div
                  class="sc-llIIlC fgxqVy"
                >
                  July 3rd, 2021
                </div>
              </div>
            </div>
            <div
              class="sc-fmZSGO gYRlxE"
              data-testid="tags"
            >
              <div
                class="sc-gwsNht ccCnot"
                data-testid="tag-js"
              >
                #
                js
              </div>
              <div
                class="sc-gwsNht ccCnot"
                data-testid="tag-react"
              >
                #
                react
              </div>
              <div
                class="sc-gwsNht ccCnot"
                data-testid="tag-hooks"
              >
                #
                hooks
              </div>
            </div>
            <p
              class="sc-elFkmj bnncxq"
            >
              In simple words this controls when to not re-render your component. I got a situation recently where a Form component was re-rendering andâ€¦
            </p>
            <div
              class="sc-kieALA gcEfxX"
            >
              <div
                class="sc-hKDTPf cshhJt"
              >
                <a
                  href="/"
                >
                  Read More...
                </a>
              </div>
            </div>
          </div>
        </article>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="sc-bXdtCk eTLLkP"
    >
      <article
        class="sc-dYOLZc gziIWq"
      >
        <div
          class="sc-jMpmlX grlzTq"
        >
          <div
            class="gatsby-image-wrapper"
            data-gatsby-image-wrapper=""
            style="position: relative; overflow: hidden;"
          >
            <div
              aria-hidden="true"
              style="padding-top: 150%;"
            />
            <div
              aria-hidden="true"
              data-placeholder-image=""
              style="height: 100%; left: 0px; position: absolute; top: 0px; width: 100%;"
            />
            <picture>
              <source
                data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/bd763/pexels-cottonbro-3832028.webp 640w"
                sizes="100vw"
                type="image/webp"
              />
              <img
                alt="asdf"
                data-gatsby-image-ssr=""
                data-main-image=""
                data-src="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg"
                data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg 640w"
                decoding="async"
                loading="lazy"
                sizes="100vw"
                style="height: 100%; left: 0px; position: absolute; top: 0px; transform: translateZ(0); transition: opacity 250ms linear; width: 100%; will-change: opacity; opacity: 0;"
              />
            </picture>
            <noscript />
            <script
              type="module"
            >
              const t="undefined"!=typeof HTMLImageElement&&"loading"in HTMLImageElement.prototype;if(t){const t=document.querySelectorAll("img[data-main-image]");for(let e of t){e.dataset.src&&(e.setAttribute("src",e.dataset.src),e.removeAttribute("data-src")),e.dataset.srcset&&(e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset"));const t=e.parentNode.querySelectorAll("source[data-srcset]");for(let e of t)e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset");e.complete&&(e.style.opacity=1,e.parentNode.parentNode.querySelector("[data-placeholder-image]").style.opacity=0)}}
            </script>
          </div>
        </div>
        <div
          class="sc-kThouk jywWDv"
        >
          <div
            class="sc-jZhnRx buEZwx"
          >
            <div
              class="sc-hoLldG cDDrgp"
            >
              <div
                class="gatsby-image-wrapper"
                data-gatsby-image-wrapper=""
                style="position: relative; overflow: hidden;"
              >
                <div
                  aria-hidden="true"
                  style="padding-top: 150%;"
                />
                <div
                  aria-hidden="true"
                  data-placeholder-image=""
                  style="height: 100%; left: 0px; position: absolute; top: 0px; width: 100%;"
                />
                <picture>
                  <source
                    data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/bd763/pexels-cottonbro-3832028.webp 640w"
                    sizes="100vw"
                    type="image/webp"
                  />
                  <img
                    alt="asdf"
                    data-gatsby-image-ssr=""
                    data-main-image=""
                    data-src="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg"
                    data-srcset="/static/902341f7675c60ef9661b2a4aa2de276/cb908/pexels-cottonbro-3832028.jpg 640w"
                    decoding="async"
                    loading="lazy"
                    sizes="100vw"
                    style="height: 100%; left: 0px; position: absolute; top: 0px; transform: translateZ(0); transition: opacity 250ms linear; width: 100%; will-change: opacity; opacity: 0;"
                  />
                </picture>
                <noscript />
                <script
                  type="module"
                >
                  const t="undefined"!=typeof HTMLImageElement&&"loading"in HTMLImageElement.prototype;if(t){const t=document.querySelectorAll("img[data-main-image]");for(let e of t){e.dataset.src&&(e.setAttribute("src",e.dataset.src),e.removeAttribute("data-src")),e.dataset.srcset&&(e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset"));const t=e.parentNode.querySelectorAll("source[data-srcset]");for(let e of t)e.setAttribute("srcset",e.dataset.srcset),e.removeAttribute("data-srcset");e.complete&&(e.style.opacity=1,e.parentNode.parentNode.querySelector("[data-placeholder-image]").style.opacity=0)}}
                </script>
              </div>
            </div>
            <div
              class="sc-hBDmJg bHXOYj"
            >
              <span
                class="sc-dTdQuR cRXXLQ"
              >
                React Hooks - memo
              </span>
              <div
                class="sc-llIIlC fgxqVy"
              >
                July 3rd, 2021
              </div>
            </div>
          </div>
          <div
            class="sc-fmZSGO gYRlxE"
            data-testid="tags"
          >
            <div
              class="sc-gwsNht ccCnot"
              data-testid="tag-js"
            >
              #
              js
            </div>
            <div
              class="sc-gwsNht ccCnot"
              data-testid="tag-react"
            >
              #
              react
            </div>
            <div
              class="sc-gwsNht ccCnot"
              data-testid="tag-hooks"
            >
              #
              hooks
            </div>
          </div>
          <p
            class="sc-elFkmj bnncxq"
          >
            In simple words this controls when to not re-render your component. I got a situation recently where a Form component was re-rendering andâ€¦
          </p>
          <div
            class="sc-kieALA gcEfxX"
          >
            <div
              class="sc-hKDTPf cshhJt"
            >
              <a
                href="/"
              >
                Read More...
              </a>
            </div>
          </div>
        </div>
      </article>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
